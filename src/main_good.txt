
import os
import time
from typing import List, Dict, Any

# --- FASTAPI & LI√äN QUAN ---
from fastapi import FastAPI, HTTPException, Body
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, Field

# --- GOOGLE SHEETS & LI√äN QUAN ---
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

# --- MODULES SCRAPER (gi·ªØ nguy√™n) ---
from scraper import scrape_news as fetch_news_from_source
from scraper import scrape_article_with_requests as fetch_article_from_source
from scraper import (
    scrape_chuong_trinh_chien_dich_du_an,
    scrape_skills,
    scrape_ideas,
    scrape_clubs,
    BASE_URL
)

# ==========================================================================
# --- 1. KH·ªûI T·∫†O ·ª®NG D·ª§NG V√Ä C·∫§U H√åNH ---
# ==========================================================================

app = FastAPI(
    title="GoVolunteer API (Scraper & Lookup)",
    description="API h·ª£p nh·∫•t cho c·∫£ vi·ªác l·∫•y d·ªØ li·ªáu t·ª´ trang web v√† tra c·ª©u th√¥ng tin t·ª´ Google Sheets.",
    version="9.0.0"  # Phi√™n b·∫£n h·ª£p nh·∫•t
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["GET", "POST"],
    allow_headers=["*"],
)

# --- C·∫§U H√åNH CHO GOOGLE SHEETS ---
SERVICE_ACCOUNT_FILE = 'credentials.json' 
SCOPES = ['https://www.googleapis.com/auth/spreadsheets.readonly']
ACTIVITY_SHEET_ID = '1BCJbZqR98jjjqCJq1B2I5p_GuyGi6xwmgxKsRhvxdh0'
# L∆∞u √Ω: S·ª≠ d·ª•ng ID c·ªßa sheet certificate b·∫°n cung c·∫•p g·∫ßn nh·∫•t
CERTIFICATE_SHEET_ID = '1KaLqFwWDNOfHx432E12ScEZ0-BDdhAPbq3Q0BJLK-Fg' 
SHEET_NAME = 'Sheet1'

# --- H·ªÜ TH·ªêNG CACHE CHO SCRAPER (gi·ªØ nguy√™n) ---
cache = {"news_data": None, "last_fetched": 0}
CACHE_DURATION_SECONDS = 1800  # 30 ph√∫t

# ==========================================================================
# --- 2. KH·ªûI T·∫†O D·ªäCH V·ª§ GOOGLE KHI APP START ---
# ==========================================================================

sheet_api = None

@app.on_event("startup")
def startup_event():
    """
    Kh·ªüi t·∫°o k·∫øt n·ªëi t·ªõi Google Sheets API m·ªôt l·∫ßn duy nh·∫•t khi ·ª©ng d·ª•ng b·∫Øt ƒë·∫ßu.
    """
    global sheet_api
    print("B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o d·ªãch v·ª• Google Sheets...")
    try:
        if os.path.exists(SERVICE_ACCOUNT_FILE):
            creds = service_account.Credentials.from_service_account_file(
                SERVICE_ACCOUNT_FILE, scopes=SCOPES)
            service = build('sheets', 'v4', credentials=creds)
            sheet_api = service.spreadsheets()
            print(">>> Kh·ªüi t·∫°o d·ªãch v·ª• Google Sheets TH√ÄNH C√îNG.")
        else:
            print(f"!!! L·ªñI QUAN TR·ªåNG: File credentials '{SERVICE_ACCOUNT_FILE}' kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y.")
    except Exception as e:
        print(f"!!! L·ªñI KH·ªûI T·∫†O D·ªäCH V·ª§ GOOGLE: {e}")

# ==========================================================================
# --- 3. C√ÅC ENDPOINTS SCRAPER (KH√îNG THAY ƒê·ªîI) ---
# ==========================================================================

@app.get("/", summary="Ki·ªÉm tra tr·∫°ng th√°i API")
def read_root():
    return {"status": "online", "message": "API GoVolunteer (Phi√™n b·∫£n h·ª£p nh·∫•t) ƒë√£ s·∫µn s√†ng!"}

@app.get("/news", summary="L·∫•y danh s√°ch t·∫•t c·∫£ tin t·ª©c")
def get_all_news():
    current_time = time.time()
    if cache["news_data"] and (current_time - cache["last_fetched"] < CACHE_DURATION_SECONDS):
        print("‚úÖ Tr·∫£ v·ªÅ d·ªØ li·ªáu /news t·ª´ cache.")
        return cache["news_data"]
    print("‚ôªÔ∏è Cache /news h·∫øt h·∫°n. B·∫Øt ƒë·∫ßu scrape d·ªØ li·ªáu m·ªõi...")
    data = fetch_news_from_source()
    if not data:
        raise HTTPException(status_code=503, detail="Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ trang ch·ªß GoVolunteer.")
    cache["news_data"] = data
    cache["last_fetched"] = current_time
    print("üíæ ƒê√£ c·∫≠p nh·∫≠t cache /news.")
    return data

@app.get("/clubs", summary="L·∫•y danh s√°ch c√°c CLB, ƒê·ªôi, Nh√≥m")
def get_clubs():
    data = scrape_clubs()
    if not data:
        raise HTTPException(status_code=503, detail="Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu CLB.")
    return data

@app.get("/chuong-trinh-chien-dich-du-an", summary="L·∫•y danh s√°ch c√°c ch∆∞∆°ng tr√¨nh, chi·∫øn d·ªãch, d·ª± √°n")
def get_campaigns():
    data = scrape_chuong_trinh_chien_dich_du_an()
    if not data:
        raise HTTPException(status_code=503, detail="Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu ch∆∞∆°ng tr√¨nh, chi·∫øn d·ªãch, d·ª± √°n.")
    return data

@app.get("/skills", summary="L·∫•y danh s√°ch c√°c b√†i vi·∫øt k·ªπ nƒÉng")
def get_skills():
    data = scrape_skills()
    if not data:
        raise HTTPException(status_code=503, detail="Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu k·ªπ nƒÉng.")
    return data

@app.get("/ideas", summary="L·∫•y danh s√°ch c√°c √Ω t∆∞·ªüng t√¨nh nguy·ªán")
def get_ideas():
    data = scrape_ideas()
    if not data:
        raise HTTPException(status_code=503, detail="Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu √Ω t∆∞·ªüng.")
    return data

@app.get("/article", summary="L·∫•y n·ªôi dung chi ti·∫øt c·ªßa m·ªôt b√†i vi·∫øt")
def get_article_detail(url: str):
    if not url or not url.startswith(BASE_URL):
        raise HTTPException(status_code=400, detail=f"URL kh√¥ng h·ª£p l·ªá. Ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng {BASE_URL}")
    content = fetch_article_from_source(url)
    if content is None:
        raise HTTPException(status_code=503, detail="Kh√¥ng th·ªÉ l·∫•y n·ªôi dung b√†i vi·∫øt.")
    return {"html_content": content}

# ==========================================================================
# --- 4. LOGIC TRA C·ª®U GOOGLE SHEETS (ƒê√É C·∫¢I TI·∫æN V√Ä T√çCH H·ª¢P) ---
# ==========================================================================

def search_all_records_in_sheet(spreadsheet_id: str, full_name: str, citizen_id: str) -> List[Dict[str, Any]]:
    """
    H√†m logic ƒë·ªÉ t√¨m ki·∫øm T·∫§T C·∫¢ c√°c d√≤ng kh·ªõp v·ªõi H·ªç t√™n v√† CCCD trong m·ªôt sheet.
    ƒê√¢y l√† phi√™n b·∫£n ƒë√£ ƒë∆∞·ª£c c·∫£i ti·∫øn ƒë·ªÉ thay th·∫ø cho _search_one_sheet.
    """
    if not sheet_api:
        raise HTTPException(status_code=503, detail="D·ªãch v·ª• Google Sheets hi·ªán kh√¥ng kh·∫£ d·ª•ng.")
    try:
        result = sheet_api.values().get(spreadsheetId=spreadsheet_id, range=SHEET_NAME).execute()
        values = result.get('values', [])
        if not values or len(values) < 2: return []

        headers = values[0]
        try:
            name_index, cccd_index = headers.index('User_Name'), headers.index('CCCD')
        except ValueError:
            raise HTTPException(status_code=500, detail=f"L·ªói c·∫•u tr√∫c b·∫£ng t√≠nh (thi·∫øu c·ªôt User_Name ho·∫∑c CCCD).")

        found_rows = []
        search_name_lower, search_citizen_id = full_name.strip().lower(), citizen_id.strip()

        for row in values[1:]:
            if len(row) > max(name_index, cccd_index):
                user_name_in_sheet = row[name_index].strip().lower()
                cccd_in_sheet = row[cccd_index].strip()
                if user_name_in_sheet == search_name_lower and cccd_in_sheet == search_citizen_id:
                    found_rows.append({headers[i]: (row[i] if i < len(row) else '') for i in range(len(headers))})
        return found_rows
    except HttpError as http_error:
        raise HTTPException(status_code=http_error.resp.status, detail="L·ªói khi giao ti·∫øp v·ªõi Google Sheets.")
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"L·ªói m√°y ch·ªß n·ªôi b·ªô kh√¥ng x√°c ƒë·ªãnh: {e}")

# ==========================================================================
# --- 5. ENDPOINT TRA C·ª®U (ƒê√É C·∫¨P NH·∫¨T ƒê·ªÇ AN TO√ÄN V√Ä HI·ªÜU QU·∫¢) ---
# ==========================================================================

class LookupRequest(BaseModel):
    fullName: str = Field(..., example="Nguy·ªÖn VƒÉn A")
    citizenId: str = Field(..., example="123456789")

@app.post("/lookup", summary="Tra c·ª©u T√¨nh nguy·ªán vi√™n t·ª´ Google Sheets")
def lookup_volunteer(request: LookupRequest):
    """
    Endpoint tra c·ª©u th√¥ng tin t√¨nh nguy·ªán vi√™n. ƒê√£ ƒë∆∞·ª£c n√¢ng c·∫•p ƒë·ªÉ:
    - T√¨m t·∫•t c·∫£ c√°c b·∫£n ghi, kh√¥ng ch·ªâ b·∫£n ghi ƒë·∫ßu ti√™n.
    - Tr·∫£ v·ªÅ "ƒê√°p ·ª©ng k√©p" ƒë·ªÉ t∆∞∆°ng th√≠ch ng∆∞·ª£c v·ªõi c√°c client c≈©.
    """
    activity_list = search_all_records_in_sheet(ACTIVITY_SHEET_ID, request.fullName, request.citizenId)
    certificate_list = search_all_records_in_sheet(CERTIFICATE_SHEET_ID, request.fullName, request.citizenId)
    
    if not activity_list and not certificate_list:
        raise HTTPException(
            status_code=404,
            detail="Kh√¥ng t√¨m th·∫•y th√¥ng tin t√¨nh nguy·ªán vi√™n ph√π h·ª£p. Vui l√≤ng ki·ªÉm tra l·∫°i H·ªç t√™n v√† CCCD."
        )

    # X√¢y d·ª±ng "ƒê√°p ·ª©ng k√©p" ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n
    return {
        # ƒê·ªãnh d·∫°ng M·ªöI (tr·∫£ v·ªÅ m·∫£ng, cho frontend m·ªõi)
        "activities": activity_list,
        "certificates": certificate_list,

        # ƒê·ªãnh d·∫°ng C≈® (tr·∫£ v·ªÅ object ƒë·∫ßu ti√™n ho·∫∑c null, cho frontend c≈©)
        "activity": activity_list[0] if activity_list else None,
        "certificate": certificate_list[0] if certificate_list else None,
    }